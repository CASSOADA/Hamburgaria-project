Criar um marketplace completo envolve diversas etapas, e a implementação de um sistema robusto requer muito mais do que apenas HTML, CSS, JavaScript e MySQL. Aqui está um guia simplificado para você começar. Para um projeto real, você deve considerar usar frameworks e bibliotecas adequadas, além de práticas como API REST e segurança.

### Estrutura do Projeto:

1. **HTML**: Estrutura das páginas.
2. **CSS**: Estilização (usando Flexbox ou Grid para layout responsivo).
3. **JavaScript**: Interatividade, manipulação do DOM e chamadas a API.
4. **MySQL**: Banco de dados para armazenar informações de produtos e usuários.
5. **Backend**: Como você mencionou não querer usar PHP, você pode usar Node.js para o backend.

### Requisitos:

- Node.js
- MySQL
- Pacotes Node.js como Express, Sequelize (ORM para MySQL), e Multer (para upload de imagens)
- Autenticação pode ser feita com JWT (JSON Web Token)
- Para pagamentos, você pode usar o PagSeguro, Stripe, etc.
- Para WhatsApp, você pode implementar a API do WhatsApp Business.

### Estrutura Básica:

1. **Estrutura de Diretórios:**
   ```
   /marketplace
   ├── /public
   │   ├── index.html
   │   ├── styles.css
   │   └── script.js
   ├── /uploads
   ├── server.js
   └── package.json
   ```

### Código Básico:

#### index.html

```html
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Marketplace</title>
</head>
<body>
    <header>
        <h1>Marketplace</h1>
        <nav>
            <a href="#produtos">Produtos</a>
            <a href="#login">Login</a>
            <a href="#cadastro">Cadastrar</a>
        </nav>
    </header>
    <main>
        <section id="produtos">
            <h2>Produtos</h2>
            <div id="produtos-lista"></div>
        </section>
        <section id="cadastro">
            <h2>Cadastrar Produto</h2>
            <form id="produto-form">
                <input type="text" id="nome" placeholder="Nome do Produto" required>
                <input type="file" id="imagem" required>
                <input type="number" id="preco" placeholder="Preço" required>
                <button type="submit">Cadastrar</button>
            </form>
        </section>
        <section id="login">
            <h2>Login</h2>
            <form id="login-form">
                <input type="email" id="email" placeholder="Email" required>
                <input type="password" id="senha" placeholder="Senha" required>
                <button type="submit">Entrar</button>
            </form>
        </section>
    </main>
    <script src="script.js"></script>
</body>
</html>
```

#### styles.css

```css
body {
    font-family: Arial, sans-serif;
}
header {
    background: #333;
    color: #fff;
    padding: 10px 20px;
}
nav a {
    color: #fff;
    margin: 0 10px;
    text-decoration: none;
}
main {
    padding: 20px;
}
```

#### script.js

```javascript
document.getElementById('produto-form').addEventListener('submit', async (e) => {
    e.preventDefault();

    const nome = document.getElementById('nome').value;
    const imagem = document.getElementById('imagem').files[0];
    const preco = document.getElementById('preco').value;

    const formData = new FormData();
    formData.append('nome', nome);
    formData.append('imagem', imagem);
    formData.append('preco', preco);

    const response = await fetch('/api/produtos', {
        method: 'POST',
        body: formData,
    });

    if (response.ok) {
        alert('Produto cadastrado com sucesso!');
        // Refresh the product list or clear the form
    } else {
        alert('Erro ao cadastrar produto');
    }
});
```

### Configurando o Backend com Node.js

#### server.js

```javascript
const express = require('express');
const multer = require('multer');
const path = require('path');
const mysql = require('mysql2/promise');

// Configuração do upload
const upload = multer({ dest: 'uploads/' });

// Configuração do banco de dados
const db = await mysql.createConnection({host: 'localhost', user: 'root', database: 'marketplace'});

const app = express();
app.use(express.json());
app.use(express.static('public'));

// Rota para cadastro de produtos
app.post('/api/produtos', upload.single('imagem'), async (req, res) => {
    const { nome, preco } = req.body;
    const imagem = req.file.filename;

    await db.execute('INSERT INTO produtos (nome, preco, imagem) VALUES (?, ?, ?)', [nome, preco, imagem]);
    res.status(201).send('Produto cadastrado com sucesso!');
});

// Iniciar o servidor
app.listen(3000, () => {
    console.log('Servidor rodando na porta 3000');
});
```

### Configuração do Banco de Dados

Crie uma tabela no MySQL:

```sql
CREATE TABLE produtos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    preco DECIMAL(10, 2) NOT NULL,
    imagem VARCHAR(255) NOT NULL
);
```

### Conclusão

Este é um exemplo básico de como você pode estruturar um marketplace em HTML, CSS, JavaScript, e MySQL. Para pagamentos online, você precisaria integrar uma API de um serviço que permita pagamentos e também implementar autenticação JWT para gestão de usuários. Para interagir pelo WhatsApp, você vai usar a API do WhatsApp Business.

Lembre-se de seguir as melhores práticas de segurança, como a validação de entradas, proteção contra CSRF e XSS, e o uso de HTTPS.